module register (input clk, rst, input [31:0] d, output reg [31:0] q);
 always @(posedge clk, posedge rst) begin
  if (rst) q = 32'd0;
  else begin
   q = d;
  end
 end
endmodule


module alu (input [3:0] control, input [31:0] a, input [31:0] b, output reg [31:0] c, output zero);
    
    assign zero = (c == 32'd0 ? 1'b1 : 1'b0);
    
    always @(*)
    case (control)
    0: c = a & b;
    1: c = a | b;
    2: c = a + b;
    3: c = a ^ b;
    4: c = a << b;
    5: c = a >> b;
    6: c = a - b;
    7: c = $signed(a) >>> b;
    endcase
endmodule



module signextend (in, out);
parameter n = 31;
input [n-1:0]in;
output [31:0] out;
assign out = {{32-n{in[n-1]}}, in};
endmodule




module sc  (input clk, rst);

 wire [31:0] pcOut, ins, aluOut, aluIn1, aluIn2, imm;

 wire [3:0] alucontrol;

 register pc (clk, rst, pcOut+4, pcOut);
 
 mem im (clk, 1'b0, 1'b1, pcOut[9:0], 32'd0, ins);
 
 regfile rf (clk, 1'b1, ins[19:15], ins[24:20], ins[11:7], aluOut, aluIn1, aluIn2);
 
 alu ALU (alucontrol, aluIn1, aluIn2, aluOut);
 
 signextend se (ins[15:0], imm);

 assign alucontrol = (
    ins[6:2] == 5'b00100 ? 4'b0010 :
    ins[6:2] == 5'b000100 ? 4'd6 :
    ins[14:12] == 3'b111 ? 4'd0 :
    ins[14:12] == 3'b110 ? 4'd1 :
    ins[14:12] == 3'b100 ? 4'd3 :
    4'd4
);

endmodule
