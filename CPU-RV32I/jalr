module register (input clk, rst, input [31:0] d, output reg [31:0] q);
 always @(posedge clk, posedge rst) begin
  if (rst) q = 32'd0;
  else begin
   q = d;
  end
 end
endmodule



module alu(input [3:0] control, input [31:0] a, input [31:0] b, output reg [31:0] c, output reg zero);

  always @(control,a,b)
  begin
    case (control)
      4'b0000:	begin
        	c = a & b;
            	end   // AND


      4'b0001:	begin
        	c = a | b;
            	end       // OR


      4'b0010:	begin
        	c = a + b;
            	end       // ADD


      4'b0011:	begin
        	c = a ^ b;
            	end       // XOR


      4'b0100:	begin
        	c = a << b;
            	end     // SLL


      4'b0101:	begin
        	c = a >> b;
            	end      // SRL


      4'b0110:	begin
        	c = a - b;
            	end       // Subtract


      4'b0111:	begin
        	c = $signed(a) >>> b;
            	end // SRA

    4'b1000:	begin
        	c = (a + b) & 32'hFFFFFFFE;
            	end
                   

      default:	begin
        	c = 0;
            	end          
    endcase
    
    zero = (c == 0) ? 1 : 0;    // Set zero output based on c value
  end

endmodule




module signextend #(
    parameter n = 31
)(
    input [n - 1:0] in, // input Max_n-bits
    output reg [31:0] out // output 32-bits
);

always @(*) begin
    if (in[n - 1] == 1) // If MSB of input is 1
        out = {{32 - n{1'b1}}, in}; // Sign extend by 1
    else
        out = {{32 - n{1'b0}}, in}; // Sign extend by 0
end

endmodule



module sc (input clk, rst);
  wire [31:0] pcOut, ins, aluOut, aluIn1, aluIn2, imm, readData, pcNext;
  wire [3:0] alucontrol;
  
  register pc(clk, rst, pcNext, pcOut);

  mem im(clk, 1'b0, 1'b1, pcOut[9:0], 32'd0, ins);
  mem dm(clk, 1'b0, 1'b1, aluOut[9:0], 32'd0, readData);

  regfile rf(clk, 1'b1, ins[19:15], ins[24:20], ins[11:7], readData, aluIn1);

  signextend #(12) sign(ins[31:20], imm);

  alu ALU(alucontrol, aluIn1, imm, aluOut);

  assign alucontrol = 4'b1000;  // jalr instruction
  
  assign pcNext = (ins[6:0] == 7'b1100111) ? aluOut : (pcOut + 4); // Calculate next PC value

endmodule

